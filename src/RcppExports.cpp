// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// parallelMatrixSquareDist
NumericMatrix parallelMatrixSquareDist(NumericMatrix x, int i);
RcppExport SEXP _scluster_parallelMatrixSquareDist(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelMatrixSquareDist(x, i));
    return rcpp_result_gen;
END_RCPP
}
// parallelMatrixCidrDist
NumericMatrix parallelMatrixCidrDist(NumericMatrix x, IntegerMatrix truth, int i, double threshold);
RcppExport SEXP _scluster_parallelMatrixCidrDist(SEXP xSEXP, SEXP truthSEXP, SEXP iSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelMatrixCidrDist(x, truth, i, threshold));
    return rcpp_result_gen;
END_RCPP
}
// vectorMatrixProduct
List vectorMatrixProduct(NumericMatrix AA, NumericVector BB);
RcppExport SEXP _scluster_vectorMatrixProduct(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type AA(AASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type BB(BBSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorMatrixProduct(AA, BB));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scluster_parallelMatrixSquareDist", (DL_FUNC) &_scluster_parallelMatrixSquareDist, 2},
    {"_scluster_parallelMatrixCidrDist", (DL_FUNC) &_scluster_parallelMatrixCidrDist, 4},
    {"_scluster_vectorMatrixProduct", (DL_FUNC) &_scluster_vectorMatrixProduct, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_scluster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
